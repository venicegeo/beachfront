#!/usr/bin/groovy

node {
    def root = pwd()
    def mvn = tool 'M3'
    def zapHome = tool 'ZAProxy_v2_5_0'
    def nodejs = tool 'NodeJS_6'
    stage("Setup") {
        deleteDir()
        if(env.GITLAB_CREDS) {
            git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
        } else {
            git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
        }
	withCredentials([[$class: 'UsernamePasswordBinding', credentialsId: "${env.ARTIFACT_READ_ONLY_CREDS}", variable: 'NPM_AUTH']]) {
            def base64encoded = sh(script: "echo -n ${NPM_AUTH} | base64", returnStdout: true).trim()
	    sh """
	      sed -i "s*SED_AUTH*${base64encoded}*g" .npmrc
	      sed -i "s*SED_NPM_LOC*${NPM_REPOSITORY_URL}*g" .npmrc  
	    """
	}
		withEnv(["PATH+=${nodejs}/bin", "NPM_CONFIG_CACHE=${root}/.npmcache", "HOME=${WORKSPACE}"]) {
            sh """
	      npm config list
              npm install
              ./node_modules/.bin/typings install
            """

        }
    }
    def appvers = sh(script: """git describe --long --tags --always | sed 's/\\./-/'g""", returnStdout: true)
    appvers = appvers.trim()
    def appName = "beachfront-${appvers}"
    if(!env.SKIP_XVFB){
      stage("Karma Tests") {
          withEnv(["PATH+=${nodejs}/bin", "NPM_CONFIG_CACHE=${root}/.npmcache", "HOME=${WORKSPACE}"]) {
            withCredentials([[$class: 'UsernamePasswordBinding', credentialsId: "${env.ARTIFACT_STORAGE_CREDS}", variable: 'NPM_AUTH']]) {
              def base64encoded = sh(script: "echo -n ${NPM_AUTH} | base64", returnStdout: true).trim()
              if (fileExists('/jslave/.npmrc')) {
                  sh "cp /jslave/.npmrc ."
              }
              sh 'xvfb-run npm run test:ci'
            }
          }
      }
    }
    if(params.SIDECAR_CONFIG_REPO) {
        stage("Security Env Extra Configs") {
            sh "mkdir -p .sec-configs"
            dir ("./.sec-configs") {
                git url: "${env.SIDECAR_CONFIG_REPO}", branch: "master", credentialsId: "${env.GITLAB_CREDS}"
                sh "cp ./uc-deploy/* ../"
            }
        }
    }
    if(!params.SKIP_SCANS) {
		/*stage("Sonar") {
			withEnv([
			  "PATH+=${nodejs}/bin",
			  "NODE_ENV=production",
			  "NPM_CONFIG_CACHE=${root}/.npmcache",
			  "HOME=${WORKSPACE}"
			]) {
			sh """
			  ./node_modules/.bin/tsc
			  ls
			  cp report/coverage/lcov.info report/coverage/lcov.info~
			  sed -E 's/\\.tsx?\$/.js/' report/coverage/lcov.info~ > report/coverage/lcov.info
			"""
			}
			withCredentials([
			  string(credentialsId: "${env.SONAR_TOKEN}", variable: "USERNAME")
			]) {
				def sonar = tool 'SonarQube Runner 2.8'
				def projectId = "venicegeo:beachfront:bf-ui"
				sh "${sonar}/bin/sonar-scanner -Dsonar.javascript.lcov.reportPath=report/coverage/lcov.info -Dsonar.host.url=${env.SONAR_URL} -Dsonar.projectKey=${projectId} -Dsonar.projectName=${projectId} -Dsonar.language=js -Dsonar.sources=src -Dsonar.tests=test -Dsonar.projectBaseDir=${root} -Dsonar.projectVersion=${appvers} -Dsonar.login=${USERNAME}"
			}
		}*/
		stage("Dependency Check") {
			withCredentials([
			  [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
			]) {
				sh """
				  /jslave/dependency-check/dependency-check/bin/dependency-check.sh --version
				  /jslave/dependency-check/dependency-check/bin/dependency-check.sh --project "bf-ui" --scan "." --format "XML" --enableExperimental --disableBundleAudit
				  /bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}
				"""
			}
		}
		stage("Fortify Scans") {
			withCredentials([
			  [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
			]) {
				sh """
				  /opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER} '**/*.js' -exclude 'test/*.js' -exclude package.json -exclude 'node_modules/**/*.js' -exclude 'public/js/**/*.js'
				  /opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER}  -scan -Xmx1G -f fortifyResults-${env.BUILD_NUMBER}.fpr
				  /bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${env.BUILD_NUMBER}.fpr ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}
				"""
			}
		}
    }
    stage("Archive") {
        def archiveName = "beachfront.zip"
	withCredentials([
          [$class: 'StringBinding', credentialsId: "${env.CONSENT_BANNER_TEXT}", variable: "CONSENT_BANNER_TEXT"]
        ]) {
            withEnv([
              "PATH+=${nodejs}/bin",
              "NPM_CONFIG_CACHE=${root}/.npmcache",
              "NODE_ENV=production",
	          "CONSENT_BANNER_TEXT=${CONSENT_BANNER_TEXT}"
            ]) {
                sh """
                  npm run build
                  cp nginx.conf dist/
                """
                dir ('dist') {
                  sh "zip -r ../${archiveName} ."
                }
            }
	}
        def getDependencyStatus = sh(script: """mvn --quiet --settings ~/.m2/settings.xml dependency:get -Dmaven.repo.local="${root}/.m2/repository" -DrepositoryId=nexus -DartifactId=beachfront -Dversion=${appvers} -DgroupId="org.venice.beachfront" -Dpackaging=zip -DremoteRepositories="nexus::default::${env.ARTIFACT_STORAGE_DEPLOY_URL}" >> /dev/null 2>&1""", returnStatus: true)
        if(getDependencyStatus == 0) {
            echo "Artifact version ${appvers} exists in Nexus, nothing to do"
        } else {
            sh """
              mvn -X --settings ~/.m2/settings.xml deploy:deploy-file -Dfile=${archiveName} -DrepositoryId=nexus  -Durl="${env.ARTIFACT_STORAGE_DEPLOY_URL}" -DgroupId="org.venice.beachfront" -DgeneratePom=false -Dpackaging=zip -Dmaven.repo.local="${root}/.m2/repository" -DartifactId=beachfront -Dversion=${appvers}
            """
        }
    }
    stage("Phase One Deploy") {
        if(!fileExists('.cf')) {
            sh "mkdir -p .cf"
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
            ]) {
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                  cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -d ${env.PHASE_ONE_PCF_DOMAIN} --no-start
                  cf set-env ${appName} SPACE ${env.PHASE_ONE_PCF_SPACE}
                  cf set-env ${appName} DOMAIN ${env.PHASE_ONE_PCF_DOMAIN}
                  cf set-env ${appName} OSM_BASE_URL ${env.OSM_BASE_URL}
                  cf set-env ${appName} PLANET_BASE_URL ${env.PLANET_BASE_URL}
                """
                try {
                  sh "cf start ${appName}"
                } catch (Exception e) {
                  //sh "cf logs --recent ${appName}"
                  sh "cf delete ${appName} -f -r"
                  error("Error during application start. Deleting ${appName} and failing the build.")
                }
            }
        }
		if(!params.SKIP_SCANS) {
			withCredentials([
			  [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
			]) {
				sh """
				  mkdir -p ${root}/zap-out
				  ${zapHome}/zap.sh -cmd -quickout ${root}/zap-out/zap.xml -quickurl https://${appName}.${env.PHASE_ONE_PCF_DOMAIN}
				  cat ${root}/zap-out/zap.xml
				  /bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@${root}/zap-out/zap.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}
				"""
			}
		}
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
            ]) {
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                """
                def legacyAppNames = sh(script: """cf routes | grep \"beachfront \" | awk '{print \$4}'""", returnStdout: true)
                sh "cf map-route ${appName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname beachfront"
                // Remove legacy applications
                for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
                    def legacyAppName = legacyApp.toString().trim()
                    if(legacyAppName != appName) {
                        sh "cf unmap-route ${legacyAppName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname beachfront"
                        sh "cf delete -f ${legacyAppName} -r"
                    }
                }
            }
        }
    }
    if(!params.SKIP_INTEGRATION_TESTS) {
        stage("Phase One Integration Tests") {
            if(!fileExists("integration-tests")) {
                sh "mkdir -p integration-tests"
            }
            withCredentials([
                [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.GX_TEST_USER}", usernameVariable: "bf_username", passwordVariable: "bf_password"],
                [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.SAUCELAB_ACCESS}", usernameVariable: "sauce_user", passwordVariable: "sauce_key"],
                [$class: 'StringBinding', credentialsId: "${env.PL_API_KEY}", variable: "PL_API_KEY"]
            ]) {
                withEnv([
                  "PCF_SPACE=${env.PHASE_ONE_PCF_SPACE}"
                ]) {
					dir ("integration-tests") {
						if(env.INTEGRATION_GITLAB_CREDS) {
							git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}", credentialsId: "${env.INTEGRATION_GITLAB_CREDS}"
						} else {
							git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}"
						}
						sh "chmod 700 ci/beachfront_ua_tests_int.sh"
						sh "ci/beachfront_ua_tests_int.sh"
					}
                }
            }
        }
    }
    if(params.DEPLOY_PHASE_TWO) {
        stage("Phase Two Deploy") {
            if(!fileExists('.cf')) {
                sh "mkdir -p .cf"
            }
            withEnv([
              "CF_HOME=.cf"
            ]) {
                withCredentials([
                  [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
                ]) {
                    sh """
                      cf api ${env.PCF_API_ENDPOINT}
                      cf auth ${CFUSER} ${CFPASS}
                      cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}
                      cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -d ${env.PHASE_TWO_PCF_DOMAIN} --no-start
                      cf set-env ${appName} SPACE ${env.PHASE_TWO_PCF_SPACE}
                      cf set-env ${appName} DOMAIN ${env.PHASE_TWO_PCF_SPACE}
                      cf set-env ${appName} OSM_BASE_URL ${env.OSM_BASE_URL}
                      cf set-env ${appName} PLANET_BASE_URL ${env.PLANET_BASE_URL}
                    """
                    try {
                      sh "cf start ${appName}"
                    } catch (Exception e) {
                      //sh "cf logs --recent ${appName}"
                      sh "cf delete ${appName} -f -r"
                      error("Error during application start. Deleting ${appName} and failing the build.")
                    }
                }
            }
			if(!params.SKIP_SCANS) {
				withCredentials([
				  [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
				]) {
					sh """
					  mkdir -p ${root}/zap-out
					  ${zapHome}/zap.sh -cmd -quickout ${root}/zap-out/zap.xml -quickurl https://${appName}.${env.PHASE_TWO_PCF_SPACE}
					  cat ${root}/zap-out/zap.xml
					  /bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@${root}/zap-out/zap.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}
					"""
				}
			}
            withEnv([
              "CF_HOME=.cf"
            ]) {
                withCredentials([
                  [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
                ]) {
                    sh """
                      cf api ${env.PCF_API_ENDPOINT}
                      cf auth ${CFUSER} ${CFPASS}
                      cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}
                    """
                    def legacyAppNames = sh(script: """cf routes | grep \"beachfront \" | awk '{print \$4}'""", returnStdout: true)
                    sh "cf map-route ${appName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname beachfront"
                    // Remove legacy applications
                    for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
                        def legacyAppName = legacyApp.toString().trim()
                        if(legacyAppName != appName) {
                            sh "cf unmap-route ${legacyAppName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname beachfront"
                            sh "cf delete -f ${legacyAppName} -r"
                        }
                    }
                }
            }
        }
    	if(!params.SKIP_INTEGRATION_TESTS) {
    		stage("Phase Two Integration Tests") {
    		    withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.GX_TEST_USER}", usernameVariable: "bf_username", passwordVariable: "bf_password"],
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.SAUCELAB_ACCESS}", usernameVariable: "sauce_user", passwordVariable: "sauce_key"],
                    [$class: 'StringBinding', credentialsId: "${env.PL_API_KEY}", variable: "PL_API_KEY"]
                ]) {
                    withEnv([
                      "PCF_SPACE=${env.PHASE_TWO_PCF_SPACE}"
                    ]) {
    					dir ("integration-tests") {
    					    sh "chmod 700 ci/beachfront_ua_tests_stage.sh"
    						sh "/bin/bash ci/beachfront_ua_tests_stage.sh"
    					}
    				}
    		    }
    		}
    	}
    }
}
