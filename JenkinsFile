#!/usr/bin/groovy

node {
  def root = pwd()
  def mvn = tool 'M3'
  def zapHome = tool 'ZAProxy_v2_5_0'
  def nodejs = tool 'NodeJS_6'
  def matomoSnippet = null // Populated from Jenkins repo
  
  stage("Config") {
    // clone the configuration repository and copy the current configuration
    def configDir = "${root}/configuration"
    def configFile = "${root}/config.json"
    dir(configDir) {
      git url: "${env.CONFIGURATION_URL}", credentialsId: "${env.CONFIGURATION_CREDS}"
      sh "mv ${configDir}/${ENVIRONMENT}-config.json ${configFile}"
      deleteDir()
    }
    // read the Matomo snippet for later insertion
    // read the current configuration
    def configJson = readJSON file: "${configFile}"
    for (param in configJson.credparams + configJson.jobparams) { 
      env."${param.name}" = (param.type == "booleanParam") ? "${param.defaultvalue}".toBoolean() : "${param.defaultvalue}"
    }
  }
  

	withCredentials([[$class: 'UsernamePasswordBinding', credentialsId: "${env.ARTIFACT_READ_ONLY_CREDS}", variable: 'NPM_AUTH']]) {
            def base64encoded = sh(script: "echo -n ${NPM_AUTH} | base64", returnStdout: true).trim()
	    sh """
	      sed -i "s*SED_AUTH*${base64encoded}*g" .npmrc
	      sed -i "s*SED_NPM_LOC*${NPM_REPOSITORY_URL}*g" .npmrc  
	    """
	}
		withEnv(["PATH+=${nodejs}/bin", "NPM_CONFIG_CACHE=${root}/.npmcache", "HOME=${WORKSPACE}"]) {
		
			if (env.CA_CERT_BUNDLE_PATH) {
				sh "npm config set cafile \"${env.CA_CERT_BUNDLE_PATH}\""
			}
			
			
            sh """
	      npm config list
              npm install
              ./node_modules/.bin/typings install
            """

        }
    }
      }
    }
    }
        def depHome = tool 'owasp_dependency_check'
        withEnv(["PATH+=${depHome}/bin"]) {
          sh 'dependency-check.sh --project "bf-ui" --scan "." --format "XML" --enableExperimental --disableBundleAudit'
          sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml ${env.THREADFIX_URL}/rest/latest/applications/${env.THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
        }
    }
        sh """
          tar cvvzf ${tarball} ${targetFiles}
        """
              mvn -X --settings ~/.m2/settings.xml deploy:deploy-file -Dfile=${tarball} -DrepositoryId=nexus  -Durl="${env.ARTIFACT_STORAGE_DEPLOY_URL}" -DgroupId="org.venice.beachfront" -DgeneratePom=false -Dpackaging=tar.gz -Dmaven.repo.local="${root}/.m2/repository" -DartifactId=beachfront -Dversion=${appvers}
            """
        }
    }
    stage("Phase One Deploy") {
        if(!fileExists('.cf')) {
            sh "mkdir -p .cf"
        }
        withEnv([
        ]) {
            }
        }
        ]) {
        }
        }
                      cf api ${env.PCF_API_ENDPOINT}
                      cf auth ${CFUSER} ${CFPASS}
                      cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}
                    """
            }
        }
    }
}
